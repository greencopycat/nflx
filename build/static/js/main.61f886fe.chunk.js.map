{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["VideoList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","label","state","hander","handleEvent","removeVideo","bind","assertThisInitialized","_this2","react_default","a","createElement","className","htmlFor","videos","map","item","key","id","src","img","alt","title","onClick","itemindex","aria-label","$event","Number","parseInt","target","attributes","value","Component","Recommendations","_this3","handler","addVideo","_this4","items","App","_this5","ws","recommendations","mylist","moveItem","removeItem","_this6","fetch","then","result","json","setState","err","console","error","filter","newlist","newArray","slice","push","newRecommendation","App_VideoList","App_Recommendations","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gOAIMA,qBAEJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAFRQ,MAAQ,UAGNP,EAAKQ,MAAQ,CACXC,OAAQT,EAAKD,MAAMW,aAGrBV,EAAKW,YAAcX,EAAKW,YAAYC,KAAjBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KANFA,wEASV,IAAAc,EAAAX,KACP,OACEY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SAAOE,QAAQ,UAAUhB,KAAKI,OAC9BQ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAEVf,KAAKJ,MAAMqB,OAAOC,IAAI,SAACC,GAAD,OACpBP,EAAAC,EAAAC,cAAA,MAAIM,IAAKD,EAAKE,IACZT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKQ,IAAKH,EAAKI,IAAKC,IAAKL,EAAKM,QAC9Bb,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAaI,EAAKM,QAEpCb,EAAAC,EAAAC,cAAA,UAAQY,QAASf,EAAKH,YAAamB,UAAWR,EAAKE,GAAIN,UAAU,iBAAiBa,aAAW,4BAA7F,mDAQDC,GACX7B,KAAKK,MAAMC,OAAOwB,OAAOC,SAASF,EAAOG,OAAOC,WAAWN,UAAUO,eAhCjDC,cAsClBC,cAEJ,SAAAA,EAAaxC,GAAO,IAAAyC,EAAA,OAAAvC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoC,IAClBC,EAAAvC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsC,GAAAjC,KAAAH,KAAOJ,KAFTQ,MAAQ,kBAGNiC,EAAKhC,MAAQ,CACXiC,QAASD,EAAKzC,MAAMW,aAEtB8B,EAAKE,SAAWF,EAAKE,SAAS9B,KAAdX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAuC,KALEA,wEAOX,IAAAG,EAAAxC,KACP,OACEY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SAAOE,QAAQ,mBAAmBhB,KAAKI,OACvCQ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAEVf,KAAKJ,MAAM6C,MAAMvB,IAAI,SAACC,GAAD,OACnBP,EAAAC,EAAAC,cAAA,MAAIM,IAAKD,EAAKE,IACZT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKQ,IAAKH,EAAKI,IAAKC,IAAKL,EAAKM,QAC9Bb,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAaI,EAAKM,QAEpCb,EAAAC,EAAAC,cAAA,UAAQY,QAASc,EAAKD,SAAUxB,UAAU,cAAcY,UAAWR,EAAKE,GAAIO,aAAW,uBAAvF,6CASLC,GACP7B,KAAKK,MAAMiC,QAAQR,OAAOC,SAASF,EAAOG,OAAOC,WAAWN,UAAUO,eA/B5CC,aA4GfO,cArEb,SAAAA,EAAa9C,GAAO,IAAA+C,EAAA,OAAA7C,OAAAC,EAAA,EAAAD,CAAAE,KAAA0C,IAClBC,EAAA7C,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4C,GAAAvC,KAAAH,KAAMJ,KAFRgD,GAAK,6BAGHD,EAAKtC,MAAQ,CACXwC,gBAAiB,GACjBC,OAAQ,IAEVH,EAAKI,SAAWJ,EAAKI,SAAStC,KAAdX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAA6C,KAChBA,EAAKK,WAAaL,EAAKK,WAAWvC,KAAhBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAA6C,KAPAA,mFAWA,IAAAM,EAAAjD,KAClBkD,MAAMlD,KAAK4C,IACVO,KAAK,SAAAC,GAAM,OAAIA,EAAOC,SACtBF,KAAK,SAAAC,GACJH,EAAKK,SAAS,CACZT,gBAAiBO,EAAOP,gBACxBC,OAAQM,EAAON,UAEhB,SAACS,GACCA,GACDC,QAAQC,MAAMF,sCAKXlC,GACP,IAAMF,EAAOnB,KAAKK,MAAMwC,gBAAgBa,OAAO,SAAAvC,GAAI,OAAEA,EAAKE,KAAOA,IAC3DsC,EAAU3D,KAAKK,MAAMwC,gBAAgBa,OAAO,SAAAvC,GAAI,OAAEA,EAAKE,KAAOA,IAChEuC,EAAW5D,KAAKK,MAAMyC,OAAOe,QACjCD,EAASE,KAAK3C,EAAK,IACnBnB,KAAKsD,SAAS,CACZT,gBAAiBc,EACjBb,OAAQc,uCAKDvC,GAET,IAAMuC,EAAW5D,KAAKK,MAAMyC,OAAOY,OAAO,SAAAvC,GAAI,OAAEA,EAAKE,KAAOA,IACtDF,EAAOnB,KAAKK,MAAMyC,OAAOY,OAAO,SAAAvC,GAAI,OAAEA,EAAKE,KAAOA,IACpD0C,EAAoB/D,KAAKK,MAAMwC,gBAAgBgB,QACnDE,EAAkBD,KAAK3C,EAAK,IAC5BnB,KAAKsD,SAAS,CACZR,OAAQc,EACRf,gBAAiBkB,qCAKnB,OACEnD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAACkD,EAAD,CAAWzD,YAAaP,KAAKgD,WAAY/B,OAAQjB,KAAKK,MAAMyC,SAC5DlC,EAAAC,EAAAC,cAACmD,EAAD,CAAiB1D,YAAaP,KAAK+C,SAAUN,MAAOzC,KAAKK,MAAMwC,mBAEjEjC,EAAAC,EAAAC,cAAA,UAEId,KAAKK,MAAMyC,OAAO5B,IAAI,SAAAC,GAAI,OACxBP,EAAAC,EAAAC,cAAA,MAAIM,IAAKD,EAAKE,IAAKF,EAAKM,kBA/DpBU,aClEE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.61f886fe.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n/* My List */\nclass VideoList extends Component {\n  label = \"My List\";\n  constructor(props) {\n    super(props)\n    this.state = {\n      hander: this.props.handleEvent\n    }\n\n    this.removeVideo = this.removeVideo.bind(this);\n  }\n\n  render() {\n    return (\n      <div className=\"filmstrip\">\n        <label htmlFor=\"mylist\">{this.label}</label>\n        <ul className=\"mylist\">\n          {\n            this.props.videos.map((item)=>(\n              <li key={item.id}>\n                <div className=\"item-image\">\n                  <img src={item.img} alt={item.title} />\n                  <span className=\"itemLabel\">{item.title}</span>\n                </div>\n                <button onClick={this.removeVideo} itemindex={item.id} className=\"btn btn-remove\" aria-label=\"Remove Item From My List\">Remove</button>\n              </li>\n            ))\n          }\n        </ul>\n      </div>\n    )\n  }\n  removeVideo ($event) {\n    this.state.hander(Number.parseInt($event.target.attributes.itemindex.value))\n  }\n}\n\n\n/* Recommendations */\nclass Recommendations extends Component {\n  label = \"Recommendations\";\n  constructor (props) {\n    super (props)\n    this.state = {\n      handler: this.props.handleEvent\n    }\n    this.addVideo = this.addVideo.bind(this);\n  }\n  render() {\n    return (\n      <div className=\"filmstrip\">\n        <label htmlFor=\"recommendations\">{this.label}</label>\n        <ul className=\"recommendations\">\n          {\n            this.props.items.map((item)=>(\n              <li key={item.id}>\n                <div className=\"item-image\">\n                  <img src={item.img} alt={item.title} />\n                  <span className=\"itemLabel\">{item.title}</span>\n                </div>\n                <button onClick={this.addVideo} className=\"btn btn-add\" itemindex={item.id} aria-label=\"Add Item to My List\">Add</button>\n              </li>\n            ))\n          }\n        </ul>\n      </div>\n    )\n  }\n\n  addVideo($event) {\n    this.state.handler(Number.parseInt($event.target.attributes.itemindex.value));\n  }\n}\n\n/* Application */\nclass App extends Component {\n  // currently using mock ws server, need to be replace for production\n  ws = \"http://localhost:3000/nflx\";\n  constructor (props) {\n    super(props);\n    this.state = {\n      recommendations: [],\n      mylist: []\n    }\n    this.moveItem = this.moveItem.bind(this);\n    this.removeItem = this.removeItem.bind(this);\n  }\n\n  /* Get JSON file */\n  componentDidMount() {\n    fetch(this.ws)\n    .then(result => result.json())\n    .then(result => {\n      this.setState({\n        recommendations: result.recommendations,\n        mylist: result.mylist\n      });\n    }, (err) => {\n      if(err) {\n        console.error(err);\n      }\n    })\n  }\n\n  moveItem(id) {\n    const item = this.state.recommendations.filter(item=>item.id === id);\n    const newlist = this.state.recommendations.filter(item=>item.id !== id);\n    let newArray = this.state.mylist.slice();\n    newArray.push(item[0]);\n    this.setState({\n      recommendations: newlist,\n      mylist: newArray\n    })\n  }\n\n\n  removeItem(id) {\n    /* use filter to get match item, or we can use map, and process data within the callback */\n    const newArray = this.state.mylist.filter(item=>item.id !== id);\n    const item = this.state.mylist.filter(item=>item.id === id);\n    let newRecommendation = this.state.recommendations.slice();\n    newRecommendation.push(item[0]);\n    this.setState({\n      mylist: newArray,\n      recommendations: newRecommendation\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <section>\n          <VideoList handleEvent={this.removeItem} videos={this.state.mylist} />\n          <Recommendations handleEvent={this.moveItem} items={this.state.recommendations} />\n        </section>\n        <ul>\n          {\n            this.state.mylist.map(item=>\n              <li key={item.id}>{item.title}</li>\n            )\n          }\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}